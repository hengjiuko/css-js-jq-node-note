                                 node.js
1.node.js，它是执行在服务端的js
    服务端是什么？ 就是等同于apache、IIS之类的东西，服务端是没有dom节点的，也没有点击事件之类的东西
      node.js，它依然是一个基于事件，支持回调的这么一个东西，因为它的开发语言就是JavaScript。
2.powerShell,是cmd控制台的进化版，就是更好一点，其它的都一样
3.cmd控制台用法
――――cd,进入某目录
――――node xxx.js,是执行某个.js文件
――――dir,查看当前目录
――――mkdir,创建新目录
――――cls,清空控制台屏幕
――――cd..，退回上一级目录
――――关闭或结束nodeJs,ctrl
4.创建第一个服务
 nodeJs所提供的服务，其实就是一个http服务器，本质上和apache是一样的

主要由三个部分组成
――1.引入模块，require了http模块
――2.创建服务器
――3.处理响应request/response
5.通过阻塞，来了解回调
nodeJs，它是异步编程
  异步就是同时做多件事
  
等待a事件结束之后，再去做b事件，那么我们就说，a事件阻塞了b事件的执行，这就叫――阻塞

  什么叫回调？
     做事件B取决于事件A，当事件A做完之后才能执行事件B
6.一个读取文件的例子（ require(fs) ）
 .readFileSync()――――同步读取文件（会阻塞，因为按js代码的顺序执行）
 
 .readFile()――――异步读取文件（非阻塞，以回调的方式来读取文件，不按js的代码顺序来执行的）
7.nodeJs事件
   在默认的情况下，（就是没有做一些特定的配置）nodeJs它是单进程单线程的应用程序，
   但是因为它的开发语言是javaScript，因为语言的特性，
         所以它天然的支持异步、回调的操作
   然后可以处理大量的并发的请求，所以性能很高
nodeJs几乎所有的api，都是支持回调的
  ――――nodeJs它也支持事件的操作
     nodeJs它只是没有dom、浏览器方面的事件，它的事件更多的是自定义，或是其它的一些检测到的事件
     nodeJs，它的事件机制，是“观察者模式”

事件机制：
 ――――1.引入事件模块，require("events")
 ――――2.创建一个xxx事件对象
 ――――3.绑定事件，.on（‘自定义xx事件或其它事件’，function(){...}）
 ――――4.触发事件，.emit('事件名')
  EventEmitter()――它就是事件的触发和监听的功能的封装

观察者模式：（一对多的关系，一般来讲，都是多个在观察着这个一，就是多个人观察一个人，这个人做了什么事情，其它人跟着做）

最简单的观察者模式，
<script type="text/javascript">
// 这是多
function a(){}
function b(){}
function c(){}

// 这是一，
function viewObj(){
	a();
	b();
	c();
}
viewObj();
/*
因为 viewObj 执行了，所以 a, b, c也都执行了。
a, b, c它们三个，在观察着 viewObj，与viewObj之间是一对多的依赖关系。
也被称为“一对多的关系”
*/
</script>
  观察者模式中
        ――被观察者，一般被称为发布者
        ――观察者，一般被称为订阅者
  发布者会有一个“主题对象”，通过它会“发布一个消息”
       这个消息会被订阅者接收到，触发相应的操作
  所以，观察者模式，也被称为“发布、订阅模式”
――――主题对象，用来发布消息的
8.nodeJs的Buffer――缓存
  例子： .toString("utf-8",0,5))
                 0――开始索引
                 5――写入个数





