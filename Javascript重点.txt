1.Javascript是由三部分构成（ECMA-262是官方名称）
    -核心（ECMAScript）
    -文档对象模型（DOM）
    -浏览器对象模型（BOM）
--ECMAScript是一个标准，它定义了JS语言的语法、基本的对象，
 -语法、类型、语句、关键字、保留字、运算符、对象
   Javascript是实现了这个标准（就是按照标准来做事）
--DOM（Document Object Model）:定义js操作html一些方法
--BOM（Browser Object Model）:定义了js操作浏览器的一些方法
2.document.write( ):向页面中写入内容，它会整个重写页面，基本不用
3.for循环，是不能中途暂停的
       alert,它可以阻塞js的运行（变相的，做到了for循环暂停的效果）――不会这么用
  for(var i=0;i<4;i++){
       alert(i);
       console.log(i);
 
     }
4.函数---可作为其它函数的参数
   -可重复执行
   -一般被事件调用，或是直接调用函数
函数参数分为形参、实参
   形参：定义函数时的参数，它就是用来接收参数
   实参：执行参数时传入的数据，因为它是真实的
**函数中return把值返回到哪了？
   -谁调用这个函数，return就把值返回给谁了
return另一个作用就是终止当前函数的执行
   一般用return false;（）
---------------匿名函数（就是没有名字的函数）-----------------
   函数可以作为值，保存在变量中
**函数的调用方法
   ―――直接调用，如：fn();
   ―――事件调用，如:btn.onclick=function(){}
5.事件
  html文档是什么？
      是document（每个载入浏览器的HTML文档都会成为Document对象）
6.作用域
 变量在ES5中分为全局变量、局部变量
   这两个东西是对函数来说，因为在ES5中，没有块级作用域（ES6有块级作用域）
 函数，分为全局作用域，局部作用域
函数内局部作用域，函数外是全局作用域
  在函数之外，不能直接访问函数内部的变量
  在函数之内，可以访问函数外的变量
  
函数内的局部变量，可以覆盖同名的函数外的变量（原因是原型链的方面）

 未使用var 声明的变量，自动生成全局变量
7.要改变input输入框的的内容，要去改变它的属性value的值
8.数据驱动视图
   --数据：用来呈现在页面上的所有内容，文字、图片、声音、视频等等，都是属于数据的一部分
   --视图：用来在浏览器中显示的html页面，就是视图。简称：view，或是view层，或是视图层，或是V层
   --数据驱动视图：页面上要显示的东西，是由数据来决定的，当修改了数据的时候，页面上就会有相应的变化
9.数组
 创建数组：（1）var arr=new Array();/*不常用*/
  Array是一个数组对象
  new Array是生成一个数组对象的实例
  把生成数组对象的实例保存在在变量arr中
（2）var arr=[];
 命名方式：
 ---_,下划线，表示是局部变量
 ---arr,表示是一个数组
 ---Obj,表示是一个对象
10.for循环嵌套
    js中不支持多维数组，所以要实现多维数组，只能是数组中嵌套数组
11.this:（1）当前函数的作用域的上下文环境，它是一个指向、引用
  （2）this，就好比一个代号，就代表了函数本身
（3）this就代表了一个函数，谁调用了这个函数，this就指向谁（最常用）
11.全局变量
 所有的全局变量都是window对象的属性。所以全局变量越多，window对象越庞大，效率相对会低
12.对象（js中所有的事物，都是对象）      见红书66页-3.7.2
  所以我们说，“javascript是基于对象的脚本语言”
  为什么是基于对象，而不是面向对象呢？
因为它不能重载（重载是封装、继承、多态）     所以，js不能实现重载
  ***js可以自定义对象
  （1）不太常用的方法，因为写起来麻烦
  var obj=new Object(); //生成了Object对象的一个实例
  （2）常用的创建对象的方法
  var obj2={}  这种方法也叫对象字面量――对象表示法
  （3）new一个函数的实例
  ***处理对象中的数据，使用for循环
对象是一组无序的键值对的集合
  --无序，没有.length（使用for in循环）
  --集合，不是数组，无法使用数组的方法
  --键，是值的名字
13.闭包
  用途：在函数外面，获得函数内部的局部变量

闭包就是一个保持了父函数内部引用的一个子函数，然后当它作为父函数的返回值被return出来的时候，它就依然保持着父函数内部的引用
 所以它在父函数的外部，依然可以访问其内部的变量

  所有全局变量，都挂载在window对象上，相对于window来讲，因为window是全局，所以一个外部函数，就是一个局部作用域
          所以，有句话叫，“任何一个函数，其实都是闭包”
14.匿名自执行函数
(function(){
       console.log(x);
  }

）();
 ---------这就是一个匿名自执行函数

/*
		  匿名自执行函数,标准套路格式
		 */
		window.abc={};
		(function(win){
			var _win=win;
			_win.a1=123;

		})(window.abc);


		//所有的变量都在window.abc之下
		console.log(window.abc);


		//a1并没有直接挂载在window上
		console.log(window.a1);

		/*这样写好处就是，在IIFE中所有的操作的变量，
		  都是在window.abc这个命名空间之中，也就是说 ， 
		   window只有一个abc这个自定义属性
		  不会出现window被挂载了一堆自定义变量的情况，这样易于管理、维护
		 */






注：明天看一下1119的上午视频的3     和      20号下午的视频2（主要是轮播图的左右按钮和三位数组写的子导航栏）
     




























































